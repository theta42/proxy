<%- include('top') %>
<script type="text/javascript">
	// Require login to see this page.
	app.auth.forceLogin()
</script>

<style type="text/css">
	label.form-label{
		font-weight: bold;
		margin-bottom: 1px;
	}

	.card-title{
		font-weight: bold;
	}

	div.hostEditPanel{
		margin-bottom: 1em;
	}
	div.form-group{
		margin-bottom: 1em;
	}
	/* my Div class for my search bar */
	.search-wrapper {
		display: flex;
		gap: .5rem;
		align-items: center;
		margin-top: 10px;
	}
	/* The input bar  */
	input {
		font-size: 1rem;
		border-top-left-radius: 5px !important;
		border-bottom-left-radius: 5px !important;
		border-top-right-radius: 5px !important;
		border-bottom-right-radius: 5px !important;    
	}

</style>

<script type="text/javascript">
	var $editHostForm;

	function parseHostRow(host) {
		host['updated_on_text'] = moment(host['updated_on'], "x").fromNow();
		host['targetssl_text'] = host['targetssl'] ? 'https://' : 'http://';
		host['forcessl_text'] = host['forcessl'] ? 'https://' : 'http://';
		host['wildcard_text'] = host['is_wildcard'] ? host['wildcard_status'] : 'Auto';

		return host;
	}

	function populateHosts(){
		app.host.list(function(error, res){
			if(error) return app.util.actionMessage(error, $.scope.hosts.$this, 'danger');

			for(let host of res){
				$.scope.hosts.push(parseHostRow(host));
			}

			$.scope.hosts.__setPut(function($el, item, list){
				$el.addClass('table-success');
				$el.fadeIn(2000, function(){
					$el.removeClass('table-success');
				});
			});
		});
	}

	function cancleHostEdit(){
		$('#hostsTable').find('tr').each(function(idx, el){
			$(el).removeClass('table-warning');
		});
		$.scope.editHost.remove();
	}

	function editHost(btn, host){
		cancleHostEdit();
		$(btn).closest('tr').addClass('table-warning');
		host = $.scope.hosts.getByKey(host);
		$.scope.editHost.update({...host, form: $editHostForm.html()});

		$.each(host, function( key, value ) {			if(typeof value == "boolean"){
				$(".hostEditPanel #"+ key +"-"+ value).prop('checked', true)
			}else{
				$(".hostEditPanel input[name='" + key + "']").val(value);
			}
		});
	};

	function deleteHost(host){
		app.host.remove({host: host}, function(error, data){
			if(error) app.util.actionMessage(error.message, $.scope.hosts.$this, 'danger');
		});
	}

	$(document).ready(function(){
		$editHostForm = $('#addHost').clone();
		$editHostForm.find('hr.buttonBreak').nextAll().remove();
		// $editHostForm.find('.autoSll').addClass('bg-secondary');
		$editHostForm.find('[name=is_wildcard').attr('disabled', true);
		populateHosts(); //populate the table

		$.scope.hosts.__setTake(function($el, item, list){
			$el.addClass('table-danger');
			$el.fadeOut(1000, function(){
				$el.remove()
			});
		});

		$.scope.hosts.__setUpdate(function($el, $render, item, list){
			$render.show()
			$el.replaceWith($render);
		});

		$.scope.editHost.__setPut(function($el, item, list){
			$el.slideDown();
		});

		$.scope.editHost.__setTake(function($el, item, list){
			$el.slideUp();
		});

		app.subscribe(/^model:Host/, function(data, topic){
			console.log(topic, data);
		});

		app.subscribe(/^model:Host:create/, function(data, topic){
			let [a,b, action, host] = topic.split(':');

			if($.scope.hosts.indexOf(host) >= 0){
				$.scope.hosts.update(host, parseHostRow(data));
			}else{
				$.scope.hosts.unshift(parseHostRow(data));
			}
		});

		app.subscribe(/^model:Host:update/, function(data, topic){
			let [a,b, action, host] = topic.split(':');

			if($.scope.hosts.indexOf(host) >= 0){
				$.scope.hosts.update(host, parseHostRow(data));
			}else{
				$.scope.hosts.unshift(parseHostRow(data));
			}
		});

		app.subscribe(/^model:Host:remove/, function(data, topic){
			let [a,b, action, host] = topic.split(':');

			$.scope.hosts.remove(host);
		});

		//search bar html event logic stolen from here
		// https://github.com/WebDevSimplified/js-search-bar/blob/main/script.js
		$('[host-search]').on("input", function() {
			let inputValue = $(this).val().toLowerCase();

			// on each input detected we need to get all host list that was called by the populateHosts function which is store in 
			// $.scope.hosts and then we need to loop through each host and check if the host name is equal to the input value
			// if it is we will display the host if not we will hide it
			for(let hostObj of $.scope.hosts){
				if (hostObj.host.toLowerCase().includes(inputValue)) {
					hostObj.__jq_$el.show();
				} else {
					hostObj.__jq_$el.hide();
				}
			}
		});
	});
</script>
<div class="row" style="display:none">
	<div class="col col-md-12 col-lg-4 col-xl-3 col-xxl-2">
	<!-- 
		left column 
	-->
		<div jq-repeat="editHost" class="card shadow-lg border-warning hostEditPanel" style="display:none">
			<!--
				Edit host card
			-->
			<div class="card-header text-center bg-warning">
				<span class="card-icon float-start">
					<i class="fa-solid fa-pencil"></i>
				</span>
				<span class="card-title">
					Edit {{ host }}
				</span>
				<span class="float-end">
					<i class="fa-solid fa-circle-minus"></i>
					<i class="fa-solid fa-circle-xmark" onclick="cancleHostEdit()"></i>
				</span>
			</div>

			<div class="card-body">
				<form class="addHost" method="PUT" action="/host/{{ host }}" onsubmit="formAJAX(this)" evalAJAX="cancleHostEdit()">
					{{{ form }}}
					<input type="hidden" name="edit_host" />
					<button type="submit" data-type="edit" class="btn btn-warning">
						<i class="fa-solid fa-pencil"></i>
						Update
					</button>
					<button class="btn btn-secondary" type="reset" onclick="cancleHostEdit()">
						<i class="fa-solid fa-ban"></i>
						Cancel
					</button>
				</form>
			</div>
		</div>

		<div class="card shadow-lg hostAddPanel">
			<!--
				Add new host card
			-->
			<div class="card-header text-center">
				<span class="card-icon float-start">
					<i class="fa-solid fa-plus"></i>
				</span>
				<span class="card-title">
					New Entry
				</span>
				<span class="float-end">
					<i class="fa-solid fa-circle-minus"></i>
				</span>
			</div>

			<div class="card-header actionMessage" style="display:none"></div>

			<div class="card-body">
				<form class="addHost" id="addHost" method="POST" action="host" onsubmit="formAJAX(this)">

					<div class="form-group">
						<label class="form-label">
							Incoming SSL
						</label>
						<br />
						<div class="radio">
							<label>
								<input type="radio" name="forcessl" id="forcessl-true" value="true" checked>
								Force incoming connections over HTTPS <b>Recommended</b>
							</label>
						</div>
						<div class="radio">
							<label>
								<input type="radio" name="forcessl" id="forcessl-false" value="false">
								Allow use of both HTTP and HTTPS
							</label>
						</div>
					</div>

					<div class="form-group autoSll">
						<label class="form-label">
							Auto SSL
						</label>
						<div class="radio">
							<label>
								<input type="radio" name="is_wildcard" id="is_wildcard-false" value="false" checked>
								On demand certs
							</label>
						</div>
						<div class="radio">
							<label>
								<input type="radio" name="is_wildcard" id="is_wildcard-true" value="true">
								Request Wildcard cert
							</label>
						</div>
					</div>

					<div class="form-group">
						<label for='host' class="form-label">
							Incoming Host Name
						</label>
						<div>
							<input type="text" name="host" class="form-control" placeholder="ex: proxy.cloud-ops.net" validate=":3" >
							<b class="invalid-feedback"></b>
						</div>
					</div>

					<div class="mb-3 form-group">
						<label for="ip" class="form-label">
							Target IP or Host Name
						</label>
						<input type="text" name="ip" class="form-control" placeholder="ex: 10.10.10.10" validate=":3" />
						<b class="invalid-feedback"></b>
					</div>

					<div class="form-group">
						<label for="targetPort" class="form-label">
							Target TCP Port
						</label>
						<input type="number"  name="targetPort" class="form-control" value="80" min="0" max="65535" />
						<b class="invalid-feedback"></b>
					</div>

					<div class="form-group">
						<label class="form-label">
							Target SSL
						</label>
						<div class="radio">
							<label>
								<input type="radio" name="targetssl" id="targetssl-true" value="true">
								Proxy to HTTPS 
							</label>
						</div>
						<div class="radio">
							<label>
								<input type="radio" name="targetssl" id="targetssl-false" value="false" checked>
								Proxy to HTTP <b>Recommended</b>
							</label>
						</div>
						<b class="invalid-feedback"></b>
					</div>
					<hr class="buttonBreak" />
					<button type="submit" class="btn btn-success">
						<i class="fa-solid fa-plus"></i>
						Add
					</button>
				</form>
			</div>
		</div>
	</div>

	<div class="col col-md-12 col-lg-8 col-xl-9 col-xxl-10">
		<!--
			Right column
		-->
		<div class="card shadow-lg hostListPanel">
			<!--
				List current hosts
			-->
			<div class="card-header text-center">
				<span class="card-icon float-start">
					<i class="fa-solid fa-network-wired"></i>
				</span>
				<span class="card-title">
					Proxy List
				</span>
				<span class="float-end">
					<i class="fa-solid fa-circle-minus"></i>
				</span>
			</div>

			<div class="card-header actionMessage" style="display:none"></div>
			<div class="card-body search-wrapper">
				<label class="form-label" for="search" style="margin-left: -5px;">
					Search Hosts:
				</label>
				<input type="search" id="search" host-search>
			</div>
			<table class="card-body table table-striped" style="margin-bottom:0">
	
				<thead>
					<th>
						SSL
					</th>
					<th>
						Host Name
					</th>
					<th>
						target
					</th>
					<th class="hidden-xs">
						Updated
					</th>
					<th>
						Actions
					</th>
				</thead>
				<tbody id="hostsTable">
					<tr action="api" jq-repeat="hosts" jq-repeat-index='host' style="display:none">
						<td>
							{{{ wildcard_text }}}
						</td>
						<td>
							<a target="_blank" href="{{ forcessl_text }}{{ host }}">
								{{{ forcessl_text }}}{{ host }}
							</a>
						</td>
						<td>
							{{{ targetssl_text }}}{{ ip }}:{{ targetPort }}
						</td>
						<td class="hidden-xs momentFromNow" data-date="{{ updated_on }}">
							{{ updated_on_text }}
						</td>
						<td>
							<div class="btn-group">
								<!-- <button type="button" class="btn btn-info">
									<i class="fa-brands fa-expeditedssl"></i>
									Cert
								</button> -->
								<button type="button" onclick="editHost(this, '{{ host }}');" class="btn btn-sm btn-warning">
									<i class="fa-solid fa-pencil"></i>
									Edit
								</button>
								<button type="button" onclick="deleteHost('{{ host }}')" class="btn btn-sm btn-danger">
									<i class="fa-solid fa-trash-can"></i>
									Delete
								</button>
							</div>
						</td>
					</tr>
				</tbody>
			</table>

		</div>
	</div>
</div>
<%- include('bottom') %>
